apiVersion: v1
kind: Pod
metadata:
  annotations:
    openshift.io/scc: restricted-v2
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
  creationTimestamp: "2023-03-08T11:58:09Z"
  generateName: downloads-7dcb49757d-
  labels:
    app: console
    component: downloads
    pod-template-hash: 7dcb49757d
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:target.workload.openshift.io/management: {}
        f:generateName: {}
        f:labels:
          .: {}
          f:app: {}
          f:component: {}
          f:pod-template-hash: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"4696ba9b-c3bd-4250-8561-bf9aba8c375a"}: {}
      f:spec:
        f:affinity:
          .: {}
          f:podAntiAffinity:
            .: {}
            f:requiredDuringSchedulingIgnoredDuringExecution: {}
        f:containers:
          k:{"name":"download-server"}:
            .: {}
            f:args: {}
            f:command: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:livenessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":8080,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:name: {}
                f:protocol: {}
            f:readinessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:securityContext:
              .: {}
              f:allowPrivilegeEscalation: {}
              f:capabilities:
                .: {}
                f:drop: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:nodeSelector: {}
        f:priorityClassName: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext:
          .: {}
          f:runAsNonRoot: {}
          f:seccompProfile:
            .: {}
            f:type: {}
        f:terminationGracePeriodSeconds: {}
        f:tolerations: {}
    manager: kube-controller-manager
    operation: Update
    time: "2023-03-08T11:58:09Z"
  name: downloads-7dcb49757d-gkxwl
  namespace: openshift-console
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: downloads-7dcb49757d
    uid: 4696ba9b-c3bd-4250-8561-bf9aba8c375a
  resourceVersion: "24710"
  uid: 37cf97aa-33bb-4aee-a8e2-6491572d079c
spec:
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: component
            operator: In
            values:
            - downloads
        topologyKey: kubernetes.io/hostname
  containers:
  - args:
    - -c
    - "cat <<EOF >>/tmp/serve.py\nimport errno, http.server, os, re, signal, socket,
      sys, tarfile, tempfile, threading, time, zipfile\n\nsignal.signal(signal.SIGTERM,
      lambda signum, frame: sys.exit(0))\n\ndef write_index(path, message):\n  with
      open(path, 'wb') as f:\n    f.write('\\n'.join([\n      '<!doctype html>',\n
      \     '<html lang=\"en\">',\n      '<head>',\n      '  <meta charset=\"utf-8\">',\n
      \     '</head>',\n      '<body>',\n      '  {}'.format(message),\n      '</body>',\n
      \     '</html>',\n      '',\n    ]).encode('utf-8'))\n\n# Launch multiple listeners
      as threads\nclass Thread(threading.Thread):\n  def __init__(self, i, socket):\n
      \   threading.Thread.__init__(self)\n    self.i = i\n    self.socket = socket\n
      \   self.daemon = True\n    self.start()\n\n  def run(self):\n    server = http.server.SimpleHTTPRequestHandler\n
      \   server.server_version = \"OpenShift Downloads Server\"\n    server.sys_version
      = \"\"\n    httpd = http.server.HTTPServer(addr, server, False)\n\n    # Prevent
      the HTTP server from re-binding every handler.\n    # https://stackoverflow.com/questions/46210672/\n
      \   httpd.socket = self.socket\n    httpd.server_bind = self.server_close =
      lambda self: None\n\n    httpd.serve_forever()\n\ntemp_dir = tempfile.mkdtemp()\nprint('serving
      from {}'.format(temp_dir))\nos.chdir(temp_dir)\nfor arch in ['amd64', 'arm64',
      'ppc64le', 's390x']:\n  os.mkdir(arch)\ncontent = ['<a href=\"oc-license\">license</a>']\nos.symlink('/usr/share/openshift/LICENSE',
      'oc-license')\n\nfor arch, operating_system, path in [\n    ('amd64', 'linux',
      '/usr/share/openshift/linux_amd64/oc'),\n    ('amd64', 'mac', '/usr/share/openshift/mac/oc'),\n
      \   ('amd64', 'windows', '/usr/share/openshift/windows/oc.exe'),\n    ('arm64',
      'linux', '/usr/share/openshift/linux_arm64/oc'),\n    ('arm64', 'mac', '/usr/share/openshift/mac_arm64/oc'),\n
      \   ('ppc64le', 'linux', '/usr/share/openshift/linux_ppc64le/oc'),\n    ('s390x',
      'linux', '/usr/share/openshift/linux_s390x/oc'),\n    ]:\n  basename = os.path.basename(path)\n
      \ target_path = os.path.join(arch, operating_system, basename)\n  os.mkdir(os.path.join(arch,
      operating_system))\n  os.symlink(path, target_path)\n  base_root, _ = os.path.splitext(basename)\n
      \ archive_path_root = os.path.join(arch, operating_system, base_root)\n  with
      tarfile.open('{}.tar'.format(archive_path_root), 'w') as tar:\n    tar.add(path,
      basename)\n  with zipfile.ZipFile('{}.zip'.format(archive_path_root), 'w') as
      zip:\n    zip.write(path, basename)\n  content.append('<a href=\"{0}\">oc ({1}
      {2})</a> (<a href=\"{0}.tar\">tar</a> <a href=\"{0}.zip\">zip</a>)'.format(target_path,
      arch, operating_system))\n\nfor root, directories, filenames in os.walk(temp_dir):\n
      \ root_link = os.path.relpath(temp_dir, os.path.join(root, 'child')).replace(os.path.sep,
      '/')\n  for directory in directories:\n    write_index(\n      path=os.path.join(root,
      directory, 'index.html'),\n      message='<p>Directory listings are disabled.
      \ See <a href=\"{}\">here</a> for available content.</p>'.format(root_link),\n
      \   )\n\nwrite_index(\n  path=os.path.join(temp_dir, 'index.html'),\n  message='\\n'.join(\n
      \   ['<ul>'] +\n    ['  <li>{}</li>'.format(entry) for entry in content] +\n
      \   ['</ul>']\n  ),\n)\n\n# Create socket\n# IPv6 should handle IPv4 passively
      so long as it is not bound to a\n# specific address or set to IPv6_ONLY\n# https://stackoverflow.com/questions/25817848/python-3-does-http-server-support-ipv6\ntry:\n
      \ addr = ('::', 8080)\n  sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\nexcept
      socket.error as err:\n  # errno.EAFNOSUPPORT is \"socket.error: [Errno 97] Address
      family not supported by protocol\"\n  # When IPv6 is disabled, socket will bind
      using IPv4.\n  if err.errno == errno.EAFNOSUPPORT:\n    addr = ('', 8080)\n
      \   sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n  else:\n    raise
      \   \nsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nsock.bind(addr)\nsock.listen(5)\n\n[Thread(i,
      socket=sock) for i in range(100)]\ntime.sleep(9e9)\nEOF\nexec python3 /tmp/serve.py\n"
    command:
    - /bin/sh
    image: registry.ci.openshift.org/origin/4.12-2023-03-04-063026@sha256:086bd25d58b410e2d97217df24fc1eb869aab4e2b0c6d266600b4c595c5557e9
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /
        port: 8080
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    name: download-server
    ports:
    - containerPort: 8080
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /
        port: 8080
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      requests:
        cpu: 10m
        memory: 50Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsUser: 1000650000
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-g9mp8
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  imagePullSecrets:
  - name: default-dockercfg-zml4x
  nodeName: vrutkovs-mrmwt-worker-b-5rcfz.c.openshift-gce-devel.internal
  nodeSelector:
    kubernetes.io/os: linux
  preemptionPolicy: PreemptLowerPriority
  priority: 2000000000
  priorityClassName: system-cluster-critical
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext:
    fsGroup: 1000650000
    runAsNonRoot: true
    seLinuxOptions:
      level: s0:c26,c0
    seccompProfile:
      type: RuntimeDefault
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 0
  tolerations:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
    operator: Exists
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 120
  - effect: NoExecute
    key: node.kubernetes.io/not-reachable
    operator: Exists
    tolerationSeconds: 120
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoSchedule
    key: node.kubernetes.io/memory-pressure
    operator: Exists
  volumes:
  - name: kube-api-access-g9mp8
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
      - configMap:
          items:
          - key: service-ca.crt
            path: service-ca.crt
          name: openshift-service-ca.crt
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2023-03-08T11:58:09Z"
    status: "True"
    type: PodScheduled
  phase: Pending
  qosClass: Burstable
